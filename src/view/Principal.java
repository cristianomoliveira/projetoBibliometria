
package view;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.domain.Aresta;
import model.domain.Artigo;
import model.domain.Autor;
import model.domain.ManipuladorDeArquivos;
import model.domain.ManipuladorDeGrafos;
import model.domain.No;


public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Arquivo");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Sair");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Grafos");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Gerar Nós (Autores)");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Gerar Arestas");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Ajuda");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Sobre");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
  //código para gerar nós


        //tipos de arquivos a serem escolhidos:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("CSV", "csv");
        
        //Usando o JfileChooser
        JFileChooser fc = new JFileChooser();
        
        //adicionando tipos de arquivos que podem ser escolhidos
        fc.setFileFilter(filtro);
        
        //título da tela
        fc.setDialogTitle("Escolha o arquivo ...");
        
        //escolhendo somente arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
       
        //resposta da janela
        int resposta = fc.showOpenDialog(this);
        
        //verificando a resposta:
        //Se o usuário clicar em OK
        if(resposta == JFileChooser.APPROVE_OPTION){
            
            File arquivo = fc.getSelectedFile();
        
            ManipuladorDeArquivos ma = new ManipuladorDeArquivos();
            ManipuladorDeGrafos mg = new ManipuladorDeGrafos();
            ArrayList<Autor> lista = new ArrayList<Autor>();

            ArrayList<No> nos = new ArrayList<No>();
            nos = ma.lerArrayListNos(arquivo);


            String textoEscrita = mg.gerarTextoNosArrayList("", nos);

            //Com os nós gerados agora serão salvos no arquivo
            //.csv escolhido pelo usuário
            //salvando o arquivo
            fc.setDialogTitle("Salvando o arquivo");
            //resposta da janela
            int resposta2 = fc.showOpenDialog(this);

            //verificando a resposta:
            //Se o usuário clicar em OK
            if(resposta2 == JFileChooser.APPROVE_OPTION){

                //Falta salvar o arquivo    


                File arqSalvo = fc.getSelectedFile();
                try {
                    FileWriter fw = new FileWriter( arqSalvo );
                    ma.escreveCsv(textoEscrita, fw);
                    JOptionPane.showMessageDialog(this, "Arquivo salvo");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Erro"+ex);
                }

            }

            
        }
        
                       
        
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
          // código para gerar arestas
        //para Arestas (Scopus)
        
        //tipos de arquivos a serem escolhidos:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("CSV", "csv");
        
        //Usando o JfileChooser
        JFileChooser fc = new JFileChooser();
        
        //adicionando tipos de arquivos que podem ser escolhidos
        fc.setFileFilter(filtro);
        
        //título da tela
        fc.setDialogTitle("Escolha o arquivo ...");
        
        //escolhendo somente arquivos
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
       
        //resposta da janela
        int resposta = fc.showOpenDialog(this);
        
        //verificando a resposta:
        //Se o usuário clicar em OK
        if(resposta == JFileChooser.APPROVE_OPTION){
            
            File arquivo = fc.getSelectedFile();
        
            ManipuladorDeArquivos m = new ManipuladorDeArquivos();
            ManipuladorDeGrafos mg = new ManipuladorDeGrafos();


            ArrayList<Autor> autores = new ArrayList<Autor>();
            ArrayList<Artigo> artigos = new ArrayList<Artigo>();
            
            //lista de autores é igual a nós
            autores = m.lerAutores(arquivo);
            artigos = m.lerAutoresPorArtigo(arquivo);
            
            
            
            
            //exibindo lista de autores (Scopus)
            //System.out.println("lista recebida");
            for(int i=0;i<=autores.size()-1; i++){

                
                //System.out.println(autores.get(i));
                
              
            }
                
            String textoEscrita = null;
            TreeSet<Autor> autoresTree = new TreeSet<Autor>();
            autoresTree = m.geraTreeSetAutores(autores);
            
            
            textoEscrita = mg.gerarTextoArestas(textoEscrita,autoresTree, artigos);
            
             List<Aresta> lista = new ArrayList<Aresta>();
             TreeSet<Aresta> arestasOrdenadas = new TreeSet<Aresta>();
            
            
            lista = mg.gerarArestas(autoresTree, artigos);
            arestasOrdenadas = mg.gerarArestasOrdenadas(lista);
            
            textoEscrita = mg.listarArestasOrdenadas(arestasOrdenadas, lista);
            //textoEscrita = mg.listarArestasOrdenadas(, )
            
                //Com os nós e arestas gerados agora serão salvos no arquivo
                //.csv escolhido pelo usuário
                //salvando o arquivo
                fc.setDialogTitle("Salvando o arquivo");
                //resposta da janela
                int resposta2 = fc.showOpenDialog(this);

                //verificando a resposta:
                //Se o usuário clicar em OK
                if(resposta2 == JFileChooser.APPROVE_OPTION){

                    
                    
                    
                    File arqSalvo = fc.getSelectedFile();
                    try {
                        FileWriter fw = new FileWriter( arqSalvo );
                        m.escreveCsv(textoEscrita, fw);
                        JOptionPane.showMessageDialog(this, "Arquivo salvo");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Erro"+ex);
                    }

                }

            
        }
        

    }//GEN-LAST:event_deleteMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
